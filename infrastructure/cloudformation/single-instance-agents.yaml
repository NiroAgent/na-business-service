AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cost-Optimized Single Instance AI Agent System for VF-Dev'

Parameters:
  InstanceType:
    Type: String
    Default: t3.large
    AllowedValues: [t3.medium, t3.large, t3.xlarge]
    Description: EC2 instance type
  
  Environment:
    Type: String
    Default: vf-dev
    Description: Environment name

Resources:
  # IAM Role for EC2 Instance
  AgentInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: AgentSystemAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:*
                  - lambda:InvokeFunction
                  - logs:*
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - secretsmanager:GetSecretValue
                Resource: '*'

  AgentInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref AgentInstanceRole]

  # Security Group
  AgentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for AI Agent instance
      VpcId: !Ref AgentVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8090
          CidrIp: 10.0.0.0/8

  # VPC (Simple setup)
  AgentVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-agent-vpc'

  AgentSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AgentVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true

  AgentInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AgentVPC
      InternetGatewayId: !Ref AgentInternetGateway

  AgentRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AgentVPC

  AgentRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref AgentRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AgentInternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AgentSubnet
      RouteTableId: !Ref AgentRouteTable

  # EC2 Instance
  AgentInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2023
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref AgentInstanceProfile
      SecurityGroupIds: [!Ref AgentSecurityGroup]
      SubnetId: !Ref AgentSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y python3 python3-pip git tmux htop
          
          # Install Node.js
          curl -fsSL https://rpm.nodesource.com/setup_lts.x | bash -
          yum install -y nodejs
          
          # Create agent user
          useradd -m -s /bin/bash agent
          mkdir -p /home/agent/agents
          chown -R agent:agent /home/agent
          
          # Clone agent repositories
          cd /home/agent
          git clone https://github.com/your-org/ai-agent-system.git
          
          # Create startup script
          cat > /home/agent/start-all-agents.sh << 'EOF'
          #!/bin/bash
          cd /home/agent/agents
          
          # Start 50 agents in separate tmux sessions
          for i in {1..50}; do
            session_name="agent-$i"
            tmux new-session -d -s "$session_name" "python3 ../ai-agent-system/agent.py --agent-id $i --environment vf-dev"
            echo "Started agent $i in session $session_name"
            sleep 1
          done
          
          echo "All 50 agents started successfully!"
          tmux list-sessions
          EOF
          
          chmod +x /home/agent/start-all-agents.sh
          chown agent:agent /home/agent/start-all-agents.sh
          
          # Auto-start agents on boot
          echo "@reboot /home/agent/start-all-agents.sh" | crontab -u agent -
          
          # Start agents now
          sudo -u agent /home/agent/start-all-agents.sh
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-agent-instance'
        - Key: Environment
          Value: !Ref Environment

  # SQS Queue for agent communication
  AgentQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${Environment}-agent-queue'
      VisibilityTimeoutSeconds: 300
      MessageRetentionPeriod: 1209600

Outputs:
  InstanceId:
    Description: Instance ID of the agent server
    Value: !Ref AgentInstance
  
  InstancePublicIP:
    Description: Public IP of the agent server
    Value: !GetAtt AgentInstance.PublicIp
  
  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub 'ssh -i your-key.pem ec2-user@${AgentInstance.PublicIp}'
  
  AgentQueueURL:
    Description: SQS Queue URL for agent communication
    Value: !Ref AgentQueue
  
  CostEstimate:
    Description: Monthly cost estimate
    Value: '$60-70/month for t3.large instance + minimal AWS services'
