name: Master Agent Orchestration
# Master orchestrator that coordinates agents across all repositories using GitHub Copilot (Claude Sonnet 4.0)

on:
  workflow_dispatch:
    inputs:
      repositories:
        description: 'Repositories to test'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - NiroSubs-V2
          - VisualForgeMediaV2
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      parallel_agents:
        description: 'Number of parallel agents'
        required: true
        default: '5'
        type: choice
        options:
          - '1'
          - '3'
          - '5'
          - '10'
  
  schedule:
    # Run comprehensive testing daily at 2 AM
    - cron: '0 2 * * *'

permissions:
  contents: write
  actions: write
  issues: write
  pull-requests: write

jobs:
  orchestrate:
    name: Master Orchestration
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    
    steps:
      - name: Setup Test Matrix
        id: set-matrix
        run: |
          REPOS='${{ github.event.inputs.repositories }}'
          
          if [ "$REPOS" = "all" ]; then
            MATRIX='{"repo":["NiroSubs-V2","VisualForgeMediaV2"]}'
          else
            MATRIX="{\"repo\":[\"$REPOS\"]}"
          fi
          
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "Test matrix: $MATRIX"
      
      - name: Create Orchestration Issue
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString();
            const env = '${{ github.event.inputs.environment }}';
            
            const issueBody = `# ðŸŽ¯ Master Agent Orchestration Run
            
            **Started**: ${date}
            **Environment**: ${env}
            **Parallel Agents**: ${{ github.event.inputs.parallel_agents }}
            **Repositories**: ${{ github.event.inputs.repositories }}
            
            ## Progress
            - [ ] NiroSubs-V2 services
            - [ ] VisualForgeMediaV2 services
            - [ ] Cross-service integration tests
            - [ ] Performance benchmarks
            - [ ] Security audit
            
            ## Agent Status
            ðŸ¤– Agents using GitHub Copilot (Claude Sonnet 4.0)
            
            Updates will be posted as comments below.
            `;
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: 'Projects',  // Create in main Projects repo
              title: `[Master Orchestration] ${env} - Run #${{ github.run_number }}`,
              body: issueBody,
              labels: ['orchestration', 'automated', env]
            });
            
            core.setOutput('issue_number', issue.data.number);

  trigger-repo-workflows:
    name: Trigger Repository Workflows
    needs: orchestrate
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.orchestrate.outputs.matrix) }}
      max-parallel: ${{ fromJson(github.event.inputs.parallel_agents) }}
    
    steps:
      - name: Trigger Repository Workflow
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="${{ matrix.repo }}"
          ENV="${{ github.event.inputs.environment }}"
          
          echo "ðŸš€ Triggering workflow for $REPO..."
          
          # Trigger the repository-specific workflow
          gh workflow run agent-orchestration.yml \
            --repo "${{ github.repository_owner }}/$REPO" \
            --field service=all \
            --field environment="$ENV" \
            --field auto_remediate=true
          
          echo "âœ… Workflow triggered for $REPO"
      
      - name: Monitor Workflow Status
        run: |
          REPO="${{ matrix.repo }}"
          
          # Wait a bit for workflow to start
          sleep 30
          
          # Check workflow status
          gh run list \
            --repo "${{ github.repository_owner }}/$REPO" \
            --workflow agent-orchestration.yml \
            --limit 1 \
            --json status,conclusion,databaseId
  
  aggregate-results:
    name: Aggregate and Report Results
    needs: [orchestrate, trigger-repo-workflows]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Projects Repository
        uses: actions/checkout@v4
      
      - name: Setup GitHub CLI with Copilot
        run: |
          gh auth status
          gh extension list | grep copilot || gh extension install github/gh-copilot
      
      - name: Collect Results from All Repositories
        id: collect
        run: |
          ENV="${{ github.event.inputs.environment }}"
          
          echo "ðŸ“Š Collecting results from all repositories..."
          
          # Collect workflow run results
          RESULTS=""
          for REPO in NiroSubs-V2 VisualForgeMediaV2; do
            echo "Checking $REPO..."
            
            # Get latest workflow run
            RUN_INFO=$(gh run list \
              --repo "${{ github.repository_owner }}/$REPO" \
              --workflow agent-orchestration.yml \
              --limit 1 \
              --json status,conclusion,databaseId,startedAt)
            
            RESULTS="${RESULTS}\n${REPO}: ${RUN_INFO}"
          done
          
          echo "results<<EOF" >> $GITHUB_OUTPUT
          echo "$RESULTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Analyze with Master Agent
        id: master-analysis
        run: |
          # Use GitHub Copilot to analyze overall system health
          PROMPT="Analyze the overall health of the microservices system including NiroSubs and VisualForgeMedia services. Identify integration issues, performance bottlenecks, and security concerns across all services."
          
          echo "1" | gh copilot suggest "$PROMPT" > master-analysis.txt 2>&1 || true
          
          if [ -f master-analysis.txt ]; then
            echo "analysis<<EOF" >> $GITHUB_OUTPUT
            cat master-analysis.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate Master Report
        uses: actions/github-script@v7
        with:
          script: |
            const results = `${{ steps.collect.outputs.results }}`;
            const analysis = `${{ steps.master-analysis.outputs.analysis }}`;
            
            const report = `# ðŸ“ˆ Master Orchestration Report
            
            ## Summary
            - **Environment**: ${{ github.event.inputs.environment }}
            - **Run Number**: ${{ github.run_number }}
            - **Status**: Completed
            
            ## Repository Results
            \`\`\`
            ${results}
            \`\`\`
            
            ## System-Wide Analysis
            ${analysis}
            
            ## Recommendations
            Based on the analysis, the following actions are recommended:
            1. Review and merge automated PRs
            2. Monitor service performance metrics
            3. Schedule follow-up testing in 6 hours
            
            ## Next Steps
            - [ ] Review PRs created by agents
            - [ ] Approve production deployments if applicable
            - [ ] Update documentation
            - [ ] Schedule next orchestration run
            
            ---
            *Report generated by Master Orchestration Agent using GitHub Copilot (Claude Sonnet 4.0)*
            `;
            
            // Update the orchestration issue
            if (${{ needs.orchestrate.outputs.issue_number }}) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: 'Projects',
                issue_number: ${{ needs.orchestrate.outputs.issue_number }},
                body: report
              });
              
              // Close the issue as completed
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: 'Projects',
                issue_number: ${{ needs.orchestrate.outputs.issue_number }},
                state: 'closed',
                labels: ['orchestration', 'completed', '${{ github.event.inputs.environment }}']
              });
            }
            
            // Write to job summary
            await core.summary
              .addRaw(report)
              .write();
      
      - name: Create Follow-up Issues if Needed
        if: contains(steps.master-analysis.outputs.analysis, 'issue') || contains(steps.master-analysis.outputs.analysis, 'error')
        uses: actions/github-script@v7
        with:
          script: |
            // Create follow-up issues for any problems found
            const issues = [
              {
                title: '[Agent] Follow-up: Integration Testing Required',
                body: 'Cross-service integration tests identified potential issues.',
                labels: ['agent-task', 'integration', 'follow-up']
              }
            ];
            
            for (const issue of issues) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: 'Projects',
                ...issue
              });
            }