name: Agent Activity Monitor
# Monitors all agent activities and provides real-time dashboard

on:
  workflow_dispatch:
  schedule:
    # Check every hour
    - cron: '0 * * * *'
  
  workflow_run:
    workflows: ["Master Agent Orchestration", "Agent Orchestration System*"]
    types: [completed, requested]

permissions:
  contents: read
  actions: read
  issues: write
  pull-requests: read

jobs:
  monitor:
    name: Monitor Agent Activities
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Agent Health
        id: health
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Checking agent activities across all repositories..."
          
          # Check active workflows
          ACTIVE_AGENTS=0
          COMPLETED_TODAY=0
          FAILED_TODAY=0
          
          for REPO in NiroSubs-V2 VisualForgeMediaV2; do
            echo "Checking $REPO..."
            
            # Get today's runs
            RUNS=$(gh run list \
              --repo "${{ github.repository_owner }}/$REPO" \
              --workflow agent-orchestration.yml \
              --limit 20 \
              --json status,conclusion,createdAt)
            
            # Count statuses
            ACTIVE=$(echo "$RUNS" | jq '[.[] | select(.status == "in_progress")] | length')
            COMPLETED=$(echo "$RUNS" | jq '[.[] | select(.conclusion == "success")] | length')
            FAILED=$(echo "$RUNS" | jq '[.[] | select(.conclusion == "failure")] | length')
            
            ACTIVE_AGENTS=$((ACTIVE_AGENTS + ACTIVE))
            COMPLETED_TODAY=$((COMPLETED_TODAY + COMPLETED))
            FAILED_TODAY=$((FAILED_TODAY + FAILED))
          done
          
          echo "active=$ACTIVE_AGENTS" >> $GITHUB_OUTPUT
          echo "completed=$COMPLETED_TODAY" >> $GITHUB_OUTPUT
          echo "failed=$FAILED_TODAY" >> $GITHUB_OUTPUT
      
      - name: Check Open PRs from Agents
        id: prs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "📝 Checking PRs created by agents..."
          
          OPEN_PRS=0
          PENDING_REVIEW=0
          
          for REPO in NiroSubs-V2 VisualForgeMediaV2; do
            # Get PRs with agent-pr label
            PRS=$(gh pr list \
              --repo "${{ github.repository_owner }}/$REPO" \
              --label agent-pr \
              --json number,title,state,isDraft)
            
            COUNT=$(echo "$PRS" | jq 'length')
            OPEN_PRS=$((OPEN_PRS + COUNT))
            
            # Count pending reviews
            for PR in $(echo "$PRS" | jq -r '.[].number'); do
              REVIEWS=$(gh pr view $PR \
                --repo "${{ github.repository_owner }}/$REPO" \
                --json reviews)
              
              if [ "$(echo "$REVIEWS" | jq '.reviews | length')" -eq 0 ]; then
                PENDING_REVIEW=$((PENDING_REVIEW + 1))
              fi
            done
          done
          
          echo "open_prs=$OPEN_PRS" >> $GITHUB_OUTPUT
          echo "pending_review=$PENDING_REVIEW" >> $GITHUB_OUTPUT
      
      - name: Check Agent Issues
        id: issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🎯 Checking agent-created issues..."
          
          OPEN_ISSUES=0
          
          for REPO in NiroSubs-V2 VisualForgeMediaV2 Projects; do
            ISSUES=$(gh issue list \
              --repo "${{ github.repository_owner }}/$REPO" \
              --label agent-task \
              --state open \
              --json number)
            
            COUNT=$(echo "$ISSUES" | jq 'length')
            OPEN_ISSUES=$((OPEN_ISSUES + COUNT))
          done
          
          echo "open_issues=$OPEN_ISSUES" >> $GITHUB_OUTPUT
      
      - name: Generate Dashboard
        uses: actions/github-script@v7
        with:
          script: |
            const active = ${{ steps.health.outputs.active }};
            const completed = ${{ steps.health.outputs.completed }};
            const failed = ${{ steps.health.outputs.failed }};
            const openPRs = ${{ steps.prs.outputs.open_prs }};
            const pendingReview = ${{ steps.prs.outputs.pending_review }};
            const openIssues = ${{ steps.issues.outputs.open_issues }};
            
            const dashboard = `# 🤖 Agent Activity Dashboard
            
            **Last Updated**: ${new Date().toISOString()}
            **Agent Provider**: GitHub Copilot (Claude Sonnet 4.0)
            
            ## 📊 Current Status
            
            | Metric | Value | Status |
            |--------|-------|--------|
            | Active Agents | ${active} | ${active > 0 ? '🟢 Running' : '⚪ Idle'} |
            | Completed Today | ${completed} | ${completed > 0 ? '✅' : '➖'} |
            | Failed Today | ${failed} | ${failed > 0 ? '🔴 Needs Attention' : '✅'} |
            | Open PRs | ${openPRs} | ${openPRs > 5 ? '⚠️ High' : '✅'} |
            | Pending Review | ${pendingReview} | ${pendingReview > 0 ? '👀 Review Needed' : '✅'} |
            | Open Tasks | ${openIssues} | ${openIssues > 0 ? '📋 In Queue' : '✅'} |
            
            ## 🎯 Active Workflows
            ${active > 0 ? '- Agents currently running: ' + active : '- No agents currently active'}
            
            ## 📝 Pending Actions
            ${pendingReview > 0 ? '- **' + pendingReview + ' PRs** need review' : ''}
            ${openIssues > 0 ? '- **' + openIssues + ' tasks** in queue' : ''}
            ${failed > 0 ? '- **' + failed + ' workflows** failed and need investigation' : ''}
            
            ## 🔄 Next Steps
            1. ${pendingReview > 0 ? 'Review pending PRs' : 'No PRs pending'}
            2. ${openIssues > 0 ? 'Process queued tasks' : 'No tasks queued'}
            3. ${failed > 0 ? 'Investigate failed workflows' : 'All workflows successful'}
            
            ## 📈 System Health
            - GitHub Copilot: ✅ Connected
            - AWS Services: ✅ Accessible
            - Agent Orchestration: ${active > 0 || completed > 0 ? '✅ Operational' : '⚠️ Check Configuration'}
            
            ---
            *Dashboard auto-generated by Agent Monitor*
            *All agents use GitHub Copilot with Claude Sonnet 4.0*
            `;
            
            // Write to job summary
            await core.summary
              .addRaw(dashboard)
              .write();
            
            // Create or update dashboard issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: 'Projects',
              labels: 'agent-dashboard',
              state: 'open'
            });
            
            if (issues.data.length > 0) {
              // Update existing dashboard
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: 'Projects',
                issue_number: issues.data[0].number,
                body: dashboard
              });
            } else {
              // Create new dashboard
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: 'Projects',
                title: '🤖 Agent Activity Dashboard',
                body: dashboard,
                labels: ['agent-dashboard', 'pinned']
              });
            }
      
      - name: Alert on Critical Issues
        if: steps.health.outputs.failed > 3 || steps.prs.outputs.pending_review > 10
        uses: actions/github-script@v7
        with:
          script: |
            // Create high-priority issue for critical situations
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: 'Projects',
              title: '🚨 Agent System Alert: Intervention Required',
              body: `Critical thresholds exceeded. Manual intervention required.
              
              - Failed workflows: ${{ steps.health.outputs.failed }}
              - Pending reviews: ${{ steps.prs.outputs.pending_review }}
              
              Please review and take action.`,
              labels: ['urgent', 'agent-alert', 'needs-attention']
            });